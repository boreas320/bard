/*    */ package com.bard.davol.util;
/*    */ 
/*    */ import java.io.File;
/*    */ import java.io.PrintStream;
/*    */ import java.net.URL;
/*    */ import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/*    */ import net.lingala.zip4j.core.ZipFile;
/*    */ import net.lingala.zip4j.model.ZipParameters;
/*    */ import org.apache.commons.lang.StringUtils;
/*    */ import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/*    */ 
/*    */ public class FileUtils
/*    */ {
/* 16 */   private static final Logger logger = LoggerFactory.getLogger(FileUtils.class);
		   private static final char WINDOWS_SEPARATOR = '\\';
/*    */ 
/*    */   public static boolean processFilePath(String[] filePaths, String udid) {
/* 19 */     if ((filePaths != null) && (filePaths.length > 0) && (StringUtils.isNotEmpty(udid))) {
/*    */       try {
/* 21 */         String zipPath = Thread.currentThread().getContextClassLoader().getResource("").getPath();
/* 22 */         int i = zipPath.indexOf("work");
/* 23 */         zipPath = zipPath.substring(0, i) + "webapps/upload/";
/* 24 */         System.out.println("========zipPath=" + zipPath);
/* 25 */         File udidFile = new File(zipPath + udid + ".zip");
/* 26 */         System.out.println("========udidFile=" + udidFile.getPath());
/* 27 */         if (udidFile.exists())
/* 28 */           udidFile.delete();
/* 29 */         ZipFile zipFile = new ZipFile(udidFile);
/* 30 */         ArrayList<File> filesToAdd = new ArrayList<File>();
                 List<File> fileDirs = new ArrayList<File>();
                 Set<String> sets = new HashSet<String>();
                 
                 ZipParameters parameters = new ZipParameters();
                 parameters.setCompressionMethod(8);
                 parameters.setCompressionLevel(5);
  				/* for(String dir : filePaths){
  					String fileDir = getFilePath(dir);
  					if(!sets.add(fileDir)){
  						continue;
  					}
  					System.out.println("fileDir=" + fileDir);
  					File dirFile = new File(fileDir);
  					if(dirFile.isDirectory()){
  						System.out.println("addFolder=======");
  						zipFile.addFolder(dirFile, parameters);
  					}
  					//fileDirs.add(dirFile);
  				 }
*/
/* 31 */         for (String path : filePaths) {
			        String fileDir = zipPath + getFilePath(path);
					/*if(!sets.add(fileDir)){
						continue;
					}*/
					System.out.println("fileDir=" + fileDir);
					File dirFile = new File(fileDir);
					File oldfile = new File(path);
					System.out.println("dirFile======="+dirFile.getPath());
					if(!dirFile.exists()){
						dirFile.mkdirs();
					}
					File newPath = new File(dirFile,oldfile.getName());
					//oldfile.renameTo(newPath);
					org.apache.commons.io.FileUtils.copyFile(oldfile, newPath);
					/*else{
				    	System.out.println("path=" + path);
	    	            File file = new File(path);
	    	            System.out.println("file path=" + file.getPath());
	    	            System.out.println("file.exists=" + file.exists());
	    	            if (!file.exists()){
	    	            	continue;
	    	            }
	    		        zipFile.addFile(file, parameters);  
	    	            //filesToAdd.add(file);
				    }*/
/*    */         }
/* 44 */         //zipFile.addFiles(filesToAdd, parameters);
				 zipFile.addFolder(zipPath + "bard/", parameters);
				 File bardPath = new File(zipPath + "bard/");
				 deleteAll(bardPath);
/* 45 */         return true;
/*    */       } catch (Exception e) {
/* 47 */         logger.error("extract file path failed.", e);
/* 48 */         return false;
/*    */       }
/*    */     }
/* 51 */     return false;
/*    */   }

		public static void deleteAll(File file) {
			if (file.isFile() || file.list().length == 0) {
				file.delete();
			} else {
				File[] files = file.listFiles();
				for (int i = 0; i < files.length; i++) {
					deleteAll(files[i]);
					files[i].delete();
				}
				if (file.exists()) {// 如果文件本身就是目录 ，就要删除目录
					file.delete();
				}
			}
		}

          public static String getFilePath(String filePath){
        	  int index = filePath.lastIndexOf(WINDOWS_SEPARATOR);
        	  int start = filePath.indexOf(WINDOWS_SEPARATOR) + 2;
        	  String path = filePath.substring(start, index+1);
        	  return path.replaceAll("\\\\\\\\", "/");
          }
           
/*    */ 
/*    */   public static void main(String[] args) {
/* 55 */     ArrayList filesToAdd = new ArrayList();
/* 56 */     filesToAdd.add(new File("E:\\other\\1406812429534-1-thumb.png"));
/* 57 */     filesToAdd.add(new File("E:\\other\\1406812429534-1.png"));
/* 58 */     filesToAdd.add(new File("E:\\other\\附件一.doc"));
/* 59 */     filesToAdd.add(new File("E:\\other\\附件2：行业信息.xls"));
/* 60 */     File[] files = (File[])filesToAdd.toArray(new File[0]);
/* 61 */     String[] filePaths = new String[files.length];
/* 62 */     for (int i = 0; i < files.length; ++i) {
/* 63 */       filePaths[i] = files[i].getPath();
/*    */     }
/* 65 */     processFilePath(filePaths, "dd");
/*    */   }
/*    */ }

