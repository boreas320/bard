/*     */ package com.bard.davol.util;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FilenameFilter;
/*     */ import java.io.PrintStream;
/*     */ import java.util.ArrayList;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.regex.Matcher;
/*     */ import java.util.regex.Pattern;
/*     */ 
/*     */ public class Directory
/*     */ {
/*     */   /*public static File[] local(File dir, String regex)
        {
  15      return dir.listFiles(new FilenameFilter(regex) {
            private Pattern pattern;
      
            public boolean accept(File dir, String name) {
  19          return this.pattern.matcher(new File(name).getName()).matches();
            }
          });
        }*/
/*     */ 
/*     */   static TreeInfo recurseDirs(File startDir)
/*     */   {
/*  45 */     TreeInfo result = new TreeInfo();
/*  46 */     for (File item : startDir.listFiles()) {
/*  47 */       if (item.isDirectory()) {
/*  48 */         result.dirs.add(item);
/*  49 */         result.addAll(recurseDirs(item));
/*     */       }
/*     */       else {
/*  52 */         result.files.add(item);
/*     */       }
/*     */     }
/*  55 */     return result;
/*     */   }
/*     */ 
/*     */   public static String processFile(File file) {
/*  59 */     StringBuilder buf = new StringBuilder(file.getName());
/*  60 */     String fileName = file.getName();
/*  61 */     int index = fileName.indexOf('.');
/*  62 */     if (index != -1) {
/*  63 */       buf.insert(index, "-" + file.lastModified());
/*     */     }
/*  65 */     return buf.toString();
/*     */   }
/*     */ 
/*     */   public static String getFilePaths(File dir) {
/*  69 */     TreeInfo treeInfo = recurseDirs(dir);
/*  70 */     List fileList = treeInfo.files;
/*  71 */     String filePaths = PPrint.pformat(fileList);
/*  72 */     return filePaths;
/*     */   }
/*     */ 
/*     */   public static List<Map<String, String>> getFilePathMap(File dir) {
/*  76 */     List list = new ArrayList();
/*  77 */     TreeInfo treeInfo = recurseDirs(dir);
/*  78 */     List<File> fileList = treeInfo.files;
/*  79 */     if ((fileList != null) && (fileList.size() > 0)) {
/*  80 */       for (File file : fileList) {
/*  81 */         if (!file.exists())
/*     */           continue;
/*  83 */         Map map = new HashMap();
/*  84 */         map.put("p", file.getPath());
/*  85 */         map.put("t", String.valueOf(file.lastModified()));
/*  86 */         list.add(map);
/*     */       }
/*     */     }
/*  89 */     return list;
/*     */   }
/*     */ 
/*     */   public static List<String> getFileList(File dir) {
/*  93 */     TreeInfo treeInfo = recurseDirs(dir);
/*  94 */     List<File>fileList = treeInfo.files;
/*  95 */     List pathList = new ArrayList();
/*  96 */     for (File file : fileList) {
/*  97 */       pathList.add(file.getPath());
/*     */     }
/*  99 */     return pathList;
/*     */   }
/*     */ 
/*     */   public static List<File> getFiles(File dir) {
/* 103 */     TreeInfo treeInfo = recurseDirs(dir);
/* 104 */     return treeInfo.files;
/*     */   }
/*     */ 
/*     */   public static List<File> getDirs(File dir) {
/* 108 */     TreeInfo treeInfo = recurseDirs(dir);
/* 109 */     return treeInfo.dirs;
/*     */   }
/*     */ 
/*     */   public static void main(String[] args) {
/* 113 */     long starttime = System.currentTimeMillis();
/* 114 */     TreeInfo treeInfo = recurseDirs(new File("E:\\other"));
/* 115 */     long endtime = System.currentTimeMillis();
/*     */ 
/* 121 */     System.out.println(getFilePathMap(new File("E:\\other")));
/*     */   }
/*     */ 
/*     */   public static class TreeInfo
/*     */     implements Iterable<File>
/*     */   {
/*     */     public List<File> files;
/*     */     public List<File> dirs;
/*     */ 
/*     */     public TreeInfo()
/*     */     {
/*  26 */       this.files = new ArrayList();
/*  27 */       this.dirs = new ArrayList();
/*     */     }
/*     */ 
/*     */     public Iterator<File> iterator() {
/*  31 */       return this.files.iterator();
/*     */     }
/*     */ 
/*     */     void addAll(TreeInfo other) {
/*  35 */       this.files.addAll(other.files);
/*  36 */       this.dirs.addAll(other.dirs);
/*     */     }
/*     */ 
/*     */     public String toString() {
/*  40 */       return "dirs: " + PPrint.pformat(this.dirs) + "\n\nfiles: " + PPrint.pformat(this.files);
/*     */     }
/*     */   }
/*     */ }

/* Location:           D:\新建文件夹\bard-service-0.0.1-SNAPSHOT\WEB-INF\classes\
 * Qualified Name:     com.bard.davol.util.Directory
 * JD-Core Version:    0.5.4
 */